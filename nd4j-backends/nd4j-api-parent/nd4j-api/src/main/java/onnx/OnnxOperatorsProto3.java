// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx-operators.proto3

package onnx;

public final class OnnxOperatorsProto3 {
  private OnnxOperatorsProto3() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface OperatorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:onnx.OperatorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The opName of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     *
     * <code>string op_type = 1;</code>
     */
    java.lang.String getOpType();
    /**
     * <pre>
     * The opName of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     *
     * <code>string op_type = 1;</code>
     */
    com.google.protobuf.ByteString
        getOpTypeBytes();

    /**
     * <pre>
     * The version of the operator set that first introduced this
     * operator. This value MUST be the same value as the
     * opset_version of the operator set that first published this operator.
     * Subsequent versions of the operator set MUST NOT alter the signature
     * or semantics of the operator once published as STABLE.
     * This field MUST be present in this version of the IR.
     * </pre>
     *
     * <code>int64 since_version = 2;</code>
     */
    long getSinceVersion();

    /**
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this operator is in an experimental or stable stage. Once an
     * operator is published as STABLE, it's syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When an operator is published as EXPERIMENTAL, the syntax and semantics
     * of the operator MAY change across operator set versions.
     * Operators "become" stable by deprecating the experimental version and
     * introducing a new stable operator with the same op_type.
     * </pre>
     *
     * <code>.onnx.OperatorProto.OperatorStatus status = 3;</code>
     */
    int getStatusValue();
    /**
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this operator is in an experimental or stable stage. Once an
     * operator is published as STABLE, it's syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When an operator is published as EXPERIMENTAL, the syntax and semantics
     * of the operator MAY change across operator set versions.
     * Operators "become" stable by deprecating the experimental version and
     * introducing a new stable operator with the same op_type.
     * </pre>
     *
     * <code>.onnx.OperatorProto.OperatorStatus status = 3;</code>
     */
    onnx.OnnxOperatorsProto3.OperatorProto.OperatorStatus getStatus();

    /**
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 10;</code>
     */
    java.lang.String getDocString();
    /**
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 10;</code>
     */
    com.google.protobuf.ByteString
        getDocStringBytes();
  }
  /**
   * <pre>
   * An OperatorProto represents the immutable specification of the signature
   * and semantics of an operator.
   * Operators are declared as part of an OperatorSet, which also defines the
   * domain opName for the set.
   * Operators are uniquely identified by a three part identifier
   *   (domain, op_type, since_version)
   * where
   *   *domain* is the domain of an operator set that
   *      contains this operator specification.
   *   *op_type* is the opName of the operator as referenced by a
   *      NodeProto.op_type
   *   *since_version* is the version of the operator set that
   *      this operator was initially declared in.
   * </pre>
   *
   * Protobuf type {@code onnx.OperatorProto}
   */
  public  static final class OperatorProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:onnx.OperatorProto)
      OperatorProtoOrBuilder {
    // Use OperatorProto.newBuilder() to construct.
    private OperatorProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OperatorProto() {
      opType_ = "";
      sinceVersion_ = 0L;
      status_ = 0;
      docString_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private OperatorProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              opType_ = s;
              break;
            }
            case 16: {

              sinceVersion_ = input.readInt64();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              status_ = rawValue;
              break;
            }
            case 82: {
              java.lang.String s = input.readStringRequireUtf8();

              docString_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return onnx.OnnxOperatorsProto3.internal_static_onnx_OperatorProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return onnx.OnnxOperatorsProto3.internal_static_onnx_OperatorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              onnx.OnnxOperatorsProto3.OperatorProto.class, onnx.OnnxOperatorsProto3.OperatorProto.Builder.class);
    }

    /**
     * Protobuf enum {@code onnx.OperatorProto.OperatorStatus}
     */
    public enum OperatorStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>EXPERIMENTAL = 0;</code>
       */
      EXPERIMENTAL(0),
      /**
       * <code>STABLE = 1;</code>
       */
      STABLE(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>EXPERIMENTAL = 0;</code>
       */
      public static final int EXPERIMENTAL_VALUE = 0;
      /**
       * <code>STABLE = 1;</code>
       */
      public static final int STABLE_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OperatorStatus valueOf(int value) {
        return forNumber(value);
      }

      public static OperatorStatus forNumber(int value) {
        switch (value) {
          case 0: return EXPERIMENTAL;
          case 1: return STABLE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OperatorStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          OperatorStatus> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OperatorStatus>() {
              public OperatorStatus findValueByNumber(int number) {
                return OperatorStatus.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return onnx.OnnxOperatorsProto3.OperatorProto.getDescriptor().getEnumTypes().get(0);
      }

      private static final OperatorStatus[] VALUES = values();

      public static OperatorStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private OperatorStatus(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:onnx.OperatorProto.OperatorStatus)
    }

    public static final int OP_TYPE_FIELD_NUMBER = 1;
    private volatile java.lang.Object opType_;
    /**
     * <pre>
     * The opName of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     *
     * <code>string op_type = 1;</code>
     */
    public java.lang.String getOpType() {
      java.lang.Object ref = opType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        opType_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The opName of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     *
     * <code>string op_type = 1;</code>
     */
    public com.google.protobuf.ByteString
        getOpTypeBytes() {
      java.lang.Object ref = opType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        opType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SINCE_VERSION_FIELD_NUMBER = 2;
    private long sinceVersion_;
    /**
     * <pre>
     * The version of the operator set that first introduced this
     * operator. This value MUST be the same value as the
     * opset_version of the operator set that first published this operator.
     * Subsequent versions of the operator set MUST NOT alter the signature
     * or semantics of the operator once published as STABLE.
     * This field MUST be present in this version of the IR.
     * </pre>
     *
     * <code>int64 since_version = 2;</code>
     */
    public long getSinceVersion() {
      return sinceVersion_;
    }

    public static final int STATUS_FIELD_NUMBER = 3;
    private int status_;
    /**
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this operator is in an experimental or stable stage. Once an
     * operator is published as STABLE, it's syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When an operator is published as EXPERIMENTAL, the syntax and semantics
     * of the operator MAY change across operator set versions.
     * Operators "become" stable by deprecating the experimental version and
     * introducing a new stable operator with the same op_type.
     * </pre>
     *
     * <code>.onnx.OperatorProto.OperatorStatus status = 3;</code>
     */
    public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this operator is in an experimental or stable stage. Once an
     * operator is published as STABLE, it's syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When an operator is published as EXPERIMENTAL, the syntax and semantics
     * of the operator MAY change across operator set versions.
     * Operators "become" stable by deprecating the experimental version and
     * introducing a new stable operator with the same op_type.
     * </pre>
     *
     * <code>.onnx.OperatorProto.OperatorStatus status = 3;</code>
     */
    public onnx.OnnxOperatorsProto3.OperatorProto.OperatorStatus getStatus() {
      onnx.OnnxOperatorsProto3.OperatorProto.OperatorStatus result = onnx.OnnxOperatorsProto3.OperatorProto.OperatorStatus.valueOf(status_);
      return result == null ? onnx.OnnxOperatorsProto3.OperatorProto.OperatorStatus.UNRECOGNIZED : result;
    }

    public static final int DOC_STRING_FIELD_NUMBER = 10;
    private volatile java.lang.Object docString_;
    /**
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 10;</code>
     */
    public java.lang.String getDocString() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        docString_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 10;</code>
     */
    public com.google.protobuf.ByteString
        getDocStringBytes() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        docString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getOpTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, opType_);
      }
      if (sinceVersion_ != 0L) {
        output.writeInt64(2, sinceVersion_);
      }
      if (status_ != onnx.OnnxOperatorsProto3.OperatorProto.OperatorStatus.EXPERIMENTAL.getNumber()) {
        output.writeEnum(3, status_);
      }
      if (!getDocStringBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 10, docString_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getOpTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, opType_);
      }
      if (sinceVersion_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, sinceVersion_);
      }
      if (status_ != onnx.OnnxOperatorsProto3.OperatorProto.OperatorStatus.EXPERIMENTAL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, status_);
      }
      if (!getDocStringBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, docString_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof onnx.OnnxOperatorsProto3.OperatorProto)) {
        return super.equals(obj);
      }
      onnx.OnnxOperatorsProto3.OperatorProto other = (onnx.OnnxOperatorsProto3.OperatorProto) obj;

      boolean result = true;
      result = result && getOpType()
          .equals(other.getOpType());
      result = result && (getSinceVersion()
          == other.getSinceVersion());
      result = result && status_ == other.status_;
      result = result && getDocString()
          .equals(other.getDocString());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + OP_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getOpType().hashCode();
      hash = (37 * hash) + SINCE_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSinceVersion());
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + status_;
      hash = (37 * hash) + DOC_STRING_FIELD_NUMBER;
      hash = (53 * hash) + getDocString().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static onnx.OnnxOperatorsProto3.OperatorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static onnx.OnnxOperatorsProto3.OperatorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static onnx.OnnxOperatorsProto3.OperatorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static onnx.OnnxOperatorsProto3.OperatorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static onnx.OnnxOperatorsProto3.OperatorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static onnx.OnnxOperatorsProto3.OperatorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static onnx.OnnxOperatorsProto3.OperatorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static onnx.OnnxOperatorsProto3.OperatorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static onnx.OnnxOperatorsProto3.OperatorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static onnx.OnnxOperatorsProto3.OperatorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(onnx.OnnxOperatorsProto3.OperatorProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An OperatorProto represents the immutable specification of the signature
     * and semantics of an operator.
     * Operators are declared as part of an OperatorSet, which also defines the
     * domain opName for the set.
     * Operators are uniquely identified by a three part identifier
     *   (domain, op_type, since_version)
     * where
     *   *domain* is the domain of an operator set that
     *      contains this operator specification.
     *   *op_type* is the opName of the operator as referenced by a
     *      NodeProto.op_type
     *   *since_version* is the version of the operator set that
     *      this operator was initially declared in.
     * </pre>
     *
     * Protobuf type {@code onnx.OperatorProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:onnx.OperatorProto)
        onnx.OnnxOperatorsProto3.OperatorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return onnx.OnnxOperatorsProto3.internal_static_onnx_OperatorProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return onnx.OnnxOperatorsProto3.internal_static_onnx_OperatorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                onnx.OnnxOperatorsProto3.OperatorProto.class, onnx.OnnxOperatorsProto3.OperatorProto.Builder.class);
      }

      // Construct using onnx.OnnxOperatorsProto3.OperatorProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        opType_ = "";

        sinceVersion_ = 0L;

        status_ = 0;

        docString_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return onnx.OnnxOperatorsProto3.internal_static_onnx_OperatorProto_descriptor;
      }

      public onnx.OnnxOperatorsProto3.OperatorProto getDefaultInstanceForType() {
        return onnx.OnnxOperatorsProto3.OperatorProto.getDefaultInstance();
      }

      public onnx.OnnxOperatorsProto3.OperatorProto build() {
        onnx.OnnxOperatorsProto3.OperatorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public onnx.OnnxOperatorsProto3.OperatorProto buildPartial() {
        onnx.OnnxOperatorsProto3.OperatorProto result = new onnx.OnnxOperatorsProto3.OperatorProto(this);
        result.opType_ = opType_;
        result.sinceVersion_ = sinceVersion_;
        result.status_ = status_;
        result.docString_ = docString_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof onnx.OnnxOperatorsProto3.OperatorProto) {
          return mergeFrom((onnx.OnnxOperatorsProto3.OperatorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(onnx.OnnxOperatorsProto3.OperatorProto other) {
        if (other == onnx.OnnxOperatorsProto3.OperatorProto.getDefaultInstance()) return this;
        if (!other.getOpType().isEmpty()) {
          opType_ = other.opType_;
          onChanged();
        }
        if (other.getSinceVersion() != 0L) {
          setSinceVersion(other.getSinceVersion());
        }
        if (other.status_ != 0) {
          setStatusValue(other.getStatusValue());
        }
        if (!other.getDocString().isEmpty()) {
          docString_ = other.docString_;
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        onnx.OnnxOperatorsProto3.OperatorProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (onnx.OnnxOperatorsProto3.OperatorProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object opType_ = "";
      /**
       * <pre>
       * The opName of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>string op_type = 1;</code>
       */
      public java.lang.String getOpType() {
        java.lang.Object ref = opType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          opType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The opName of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>string op_type = 1;</code>
       */
      public com.google.protobuf.ByteString
          getOpTypeBytes() {
        java.lang.Object ref = opType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          opType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The opName of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>string op_type = 1;</code>
       */
      public Builder setOpType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        opType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The opName of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>string op_type = 1;</code>
       */
      public Builder clearOpType() {
        
        opType_ = getDefaultInstance().getOpType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The opName of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>string op_type = 1;</code>
       */
      public Builder setOpTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        opType_ = value;
        onChanged();
        return this;
      }

      private long sinceVersion_ ;
      /**
       * <pre>
       * The version of the operator set that first introduced this
       * operator. This value MUST be the same value as the
       * opset_version of the operator set that first published this operator.
       * Subsequent versions of the operator set MUST NOT alter the signature
       * or semantics of the operator once published as STABLE.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>int64 since_version = 2;</code>
       */
      public long getSinceVersion() {
        return sinceVersion_;
      }
      /**
       * <pre>
       * The version of the operator set that first introduced this
       * operator. This value MUST be the same value as the
       * opset_version of the operator set that first published this operator.
       * Subsequent versions of the operator set MUST NOT alter the signature
       * or semantics of the operator once published as STABLE.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>int64 since_version = 2;</code>
       */
      public Builder setSinceVersion(long value) {
        
        sinceVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The version of the operator set that first introduced this
       * operator. This value MUST be the same value as the
       * opset_version of the operator set that first published this operator.
       * Subsequent versions of the operator set MUST NOT alter the signature
       * or semantics of the operator once published as STABLE.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>int64 since_version = 2;</code>
       */
      public Builder clearSinceVersion() {
        
        sinceVersion_ = 0L;
        onChanged();
        return this;
      }

      private int status_ = 0;
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       *
       * <code>.onnx.OperatorProto.OperatorStatus status = 3;</code>
       */
      public int getStatusValue() {
        return status_;
      }
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       *
       * <code>.onnx.OperatorProto.OperatorStatus status = 3;</code>
       */
      public Builder setStatusValue(int value) {
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       *
       * <code>.onnx.OperatorProto.OperatorStatus status = 3;</code>
       */
      public onnx.OnnxOperatorsProto3.OperatorProto.OperatorStatus getStatus() {
        onnx.OnnxOperatorsProto3.OperatorProto.OperatorStatus result = onnx.OnnxOperatorsProto3.OperatorProto.OperatorStatus.valueOf(status_);
        return result == null ? onnx.OnnxOperatorsProto3.OperatorProto.OperatorStatus.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       *
       * <code>.onnx.OperatorProto.OperatorStatus status = 3;</code>
       */
      public Builder setStatus(onnx.OnnxOperatorsProto3.OperatorProto.OperatorStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        status_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       *
       * <code>.onnx.OperatorProto.OperatorStatus status = 3;</code>
       */
      public Builder clearStatus() {
        
        status_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object docString_ = "";
      /**
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 10;</code>
       */
      public java.lang.String getDocString() {
        java.lang.Object ref = docString_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          docString_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 10;</code>
       */
      public com.google.protobuf.ByteString
          getDocStringBytes() {
        java.lang.Object ref = docString_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          docString_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 10;</code>
       */
      public Builder setDocString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        docString_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 10;</code>
       */
      public Builder clearDocString() {
        
        docString_ = getDefaultInstance().getDocString();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 10;</code>
       */
      public Builder setDocStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        docString_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:onnx.OperatorProto)
    }

    // @@protoc_insertion_point(class_scope:onnx.OperatorProto)
    private static final onnx.OnnxOperatorsProto3.OperatorProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new onnx.OnnxOperatorsProto3.OperatorProto();
    }

    public static onnx.OnnxOperatorsProto3.OperatorProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OperatorProto>
        PARSER = new com.google.protobuf.AbstractParser<OperatorProto>() {
      public OperatorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new OperatorProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<OperatorProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OperatorProto> getParserForType() {
      return PARSER;
    }

    public onnx.OnnxOperatorsProto3.OperatorProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OperatorSetProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:onnx.OperatorSetProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     *
     * <code>string magic = 1;</code>
     */
    java.lang.String getMagic();
    /**
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     *
     * <code>string magic = 1;</code>
     */
    com.google.protobuf.ByteString
        getMagicBytes();

    /**
     * <pre>
     * All OperatorSetProtos indicate the version of the IR syntax and semantics
     * they adhere to. It is always IR_VERSION.
     * This field MUST be present in this version of the IR
     * </pre>
     *
     * <code>int32 ir_version = 2;</code>
     */
    int getIrVersion();

    /**
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_version_prerelease = 3;</code>
     */
    java.lang.String getIrVersionPrerelease();
    /**
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_version_prerelease = 3;</code>
     */
    com.google.protobuf.ByteString
        getIrVersionPrereleaseBytes();

    /**
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_build_metadata = 7;</code>
     */
    java.lang.String getIrBuildMetadata();
    /**
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_build_metadata = 7;</code>
     */
    com.google.protobuf.ByteString
        getIrBuildMetadataBytes();

    /**
     * <pre>
     * Domain opName of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     *
     * <code>string domain = 4;</code>
     */
    java.lang.String getDomain();
    /**
     * <pre>
     * Domain opName of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     *
     * <code>string domain = 4;</code>
     */
    com.google.protobuf.ByteString
        getDomainBytes();

    /**
     * <pre>
     * The version of the set of operators. This is a simple int value
     * that is monotonically increasing as new versions of operator set
     * are published. All operators in this set MUST have version
     * numbers no greater than opset_version.
     * </pre>
     *
     * <code>int64 opset_version = 5;</code>
     */
    long getOpsetVersion();

    /**
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 6;</code>
     */
    java.lang.String getDocString();
    /**
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 6;</code>
     */
    com.google.protobuf.ByteString
        getDocStringBytes();

    /**
     * <pre>
     * The operators specified by this operator set.
     * The (opName, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    java.util.List<onnx.OnnxOperatorsProto3.OperatorProto> 
        getOperatorList();
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (opName, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    onnx.OnnxOperatorsProto3.OperatorProto getOperator(int index);
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (opName, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    int getOperatorCount();
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (opName, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    java.util.List<? extends onnx.OnnxOperatorsProto3.OperatorProtoOrBuilder> 
        getOperatorOrBuilderList();
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (opName, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    onnx.OnnxOperatorsProto3.OperatorProtoOrBuilder getOperatorOrBuilder(
        int index);
  }
  /**
   * <pre>
   * An OperatorSetProto represents an immutable set of immutable operator
   * specifications.
   * The domain of the set (OperatorSetProto.domain) is a reverse-DNS opName
   * that disambiguates operator sets defined by independent entities.
   * The version of the set (opset_version) is a monotonically increasing
   * integer that indicates changes to the membership of the operator set.
   * Operator sets are uniquely identified by a two part identifier (domain, opset_version)
   * Like ModelProto, OperatorSetProto is intended as a top-level file/wire format,
   * and thus has the standard format headers in addition to the operator set information.
   * </pre>
   *
   * Protobuf type {@code onnx.OperatorSetProto}
   */
  public  static final class OperatorSetProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:onnx.OperatorSetProto)
      OperatorSetProtoOrBuilder {
    // Use OperatorSetProto.newBuilder() to construct.
    private OperatorSetProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OperatorSetProto() {
      magic_ = "";
      irVersion_ = 0;
      irVersionPrerelease_ = "";
      irBuildMetadata_ = "";
      domain_ = "";
      opsetVersion_ = 0L;
      docString_ = "";
      operator_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private OperatorSetProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              magic_ = s;
              break;
            }
            case 16: {

              irVersion_ = input.readInt32();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              irVersionPrerelease_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              domain_ = s;
              break;
            }
            case 40: {

              opsetVersion_ = input.readInt64();
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              docString_ = s;
              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();

              irBuildMetadata_ = s;
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                operator_ = new java.util.ArrayList<onnx.OnnxOperatorsProto3.OperatorProto>();
                mutable_bitField0_ |= 0x00000080;
              }
              operator_.add(
                  input.readMessage(onnx.OnnxOperatorsProto3.OperatorProto.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          operator_ = java.util.Collections.unmodifiableList(operator_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return onnx.OnnxOperatorsProto3.internal_static_onnx_OperatorSetProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return onnx.OnnxOperatorsProto3.internal_static_onnx_OperatorSetProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              onnx.OnnxOperatorsProto3.OperatorSetProto.class, onnx.OnnxOperatorsProto3.OperatorSetProto.Builder.class);
    }

    private int bitField0_;
    public static final int MAGIC_FIELD_NUMBER = 1;
    private volatile java.lang.Object magic_;
    /**
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     *
     * <code>string magic = 1;</code>
     */
    public java.lang.String getMagic() {
      java.lang.Object ref = magic_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        magic_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     *
     * <code>string magic = 1;</code>
     */
    public com.google.protobuf.ByteString
        getMagicBytes() {
      java.lang.Object ref = magic_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        magic_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IR_VERSION_FIELD_NUMBER = 2;
    private int irVersion_;
    /**
     * <pre>
     * All OperatorSetProtos indicate the version of the IR syntax and semantics
     * they adhere to. It is always IR_VERSION.
     * This field MUST be present in this version of the IR
     * </pre>
     *
     * <code>int32 ir_version = 2;</code>
     */
    public int getIrVersion() {
      return irVersion_;
    }

    public static final int IR_VERSION_PRERELEASE_FIELD_NUMBER = 3;
    private volatile java.lang.Object irVersionPrerelease_;
    /**
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_version_prerelease = 3;</code>
     */
    public java.lang.String getIrVersionPrerelease() {
      java.lang.Object ref = irVersionPrerelease_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        irVersionPrerelease_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_version_prerelease = 3;</code>
     */
    public com.google.protobuf.ByteString
        getIrVersionPrereleaseBytes() {
      java.lang.Object ref = irVersionPrerelease_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        irVersionPrerelease_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IR_BUILD_METADATA_FIELD_NUMBER = 7;
    private volatile java.lang.Object irBuildMetadata_;
    /**
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_build_metadata = 7;</code>
     */
    public java.lang.String getIrBuildMetadata() {
      java.lang.Object ref = irBuildMetadata_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        irBuildMetadata_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_build_metadata = 7;</code>
     */
    public com.google.protobuf.ByteString
        getIrBuildMetadataBytes() {
      java.lang.Object ref = irBuildMetadata_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        irBuildMetadata_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DOMAIN_FIELD_NUMBER = 4;
    private volatile java.lang.Object domain_;
    /**
     * <pre>
     * Domain opName of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     *
     * <code>string domain = 4;</code>
     */
    public java.lang.String getDomain() {
      java.lang.Object ref = domain_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        domain_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Domain opName of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     *
     * <code>string domain = 4;</code>
     */
    public com.google.protobuf.ByteString
        getDomainBytes() {
      java.lang.Object ref = domain_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        domain_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OPSET_VERSION_FIELD_NUMBER = 5;
    private long opsetVersion_;
    /**
     * <pre>
     * The version of the set of operators. This is a simple int value
     * that is monotonically increasing as new versions of operator set
     * are published. All operators in this set MUST have version
     * numbers no greater than opset_version.
     * </pre>
     *
     * <code>int64 opset_version = 5;</code>
     */
    public long getOpsetVersion() {
      return opsetVersion_;
    }

    public static final int DOC_STRING_FIELD_NUMBER = 6;
    private volatile java.lang.Object docString_;
    /**
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 6;</code>
     */
    public java.lang.String getDocString() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        docString_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 6;</code>
     */
    public com.google.protobuf.ByteString
        getDocStringBytes() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        docString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OPERATOR_FIELD_NUMBER = 8;
    private java.util.List<onnx.OnnxOperatorsProto3.OperatorProto> operator_;
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (opName, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    public java.util.List<onnx.OnnxOperatorsProto3.OperatorProto> getOperatorList() {
      return operator_;
    }
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (opName, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    public java.util.List<? extends onnx.OnnxOperatorsProto3.OperatorProtoOrBuilder> 
        getOperatorOrBuilderList() {
      return operator_;
    }
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (opName, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    public int getOperatorCount() {
      return operator_.size();
    }
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (opName, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    public onnx.OnnxOperatorsProto3.OperatorProto getOperator(int index) {
      return operator_.get(index);
    }
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (opName, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    public onnx.OnnxOperatorsProto3.OperatorProtoOrBuilder getOperatorOrBuilder(
        int index) {
      return operator_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getMagicBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, magic_);
      }
      if (irVersion_ != 0) {
        output.writeInt32(2, irVersion_);
      }
      if (!getIrVersionPrereleaseBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, irVersionPrerelease_);
      }
      if (!getDomainBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, domain_);
      }
      if (opsetVersion_ != 0L) {
        output.writeInt64(5, opsetVersion_);
      }
      if (!getDocStringBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, docString_);
      }
      if (!getIrBuildMetadataBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, irBuildMetadata_);
      }
      for (int i = 0; i < operator_.size(); i++) {
        output.writeMessage(8, operator_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getMagicBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, magic_);
      }
      if (irVersion_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, irVersion_);
      }
      if (!getIrVersionPrereleaseBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, irVersionPrerelease_);
      }
      if (!getDomainBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, domain_);
      }
      if (opsetVersion_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, opsetVersion_);
      }
      if (!getDocStringBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, docString_);
      }
      if (!getIrBuildMetadataBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, irBuildMetadata_);
      }
      for (int i = 0; i < operator_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, operator_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof onnx.OnnxOperatorsProto3.OperatorSetProto)) {
        return super.equals(obj);
      }
      onnx.OnnxOperatorsProto3.OperatorSetProto other = (onnx.OnnxOperatorsProto3.OperatorSetProto) obj;

      boolean result = true;
      result = result && getMagic()
          .equals(other.getMagic());
      result = result && (getIrVersion()
          == other.getIrVersion());
      result = result && getIrVersionPrerelease()
          .equals(other.getIrVersionPrerelease());
      result = result && getIrBuildMetadata()
          .equals(other.getIrBuildMetadata());
      result = result && getDomain()
          .equals(other.getDomain());
      result = result && (getOpsetVersion()
          == other.getOpsetVersion());
      result = result && getDocString()
          .equals(other.getDocString());
      result = result && getOperatorList()
          .equals(other.getOperatorList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MAGIC_FIELD_NUMBER;
      hash = (53 * hash) + getMagic().hashCode();
      hash = (37 * hash) + IR_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getIrVersion();
      hash = (37 * hash) + IR_VERSION_PRERELEASE_FIELD_NUMBER;
      hash = (53 * hash) + getIrVersionPrerelease().hashCode();
      hash = (37 * hash) + IR_BUILD_METADATA_FIELD_NUMBER;
      hash = (53 * hash) + getIrBuildMetadata().hashCode();
      hash = (37 * hash) + DOMAIN_FIELD_NUMBER;
      hash = (53 * hash) + getDomain().hashCode();
      hash = (37 * hash) + OPSET_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getOpsetVersion());
      hash = (37 * hash) + DOC_STRING_FIELD_NUMBER;
      hash = (53 * hash) + getDocString().hashCode();
      if (getOperatorCount() > 0) {
        hash = (37 * hash) + OPERATOR_FIELD_NUMBER;
        hash = (53 * hash) + getOperatorList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static onnx.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static onnx.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static onnx.OnnxOperatorsProto3.OperatorSetProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static onnx.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static onnx.OnnxOperatorsProto3.OperatorSetProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static onnx.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static onnx.OnnxOperatorsProto3.OperatorSetProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static onnx.OnnxOperatorsProto3.OperatorSetProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static onnx.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static onnx.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(onnx.OnnxOperatorsProto3.OperatorSetProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An OperatorSetProto represents an immutable set of immutable operator
     * specifications.
     * The domain of the set (OperatorSetProto.domain) is a reverse-DNS opName
     * that disambiguates operator sets defined by independent entities.
     * The version of the set (opset_version) is a monotonically increasing
     * integer that indicates changes to the membership of the operator set.
     * Operator sets are uniquely identified by a two part identifier (domain, opset_version)
     * Like ModelProto, OperatorSetProto is intended as a top-level file/wire format,
     * and thus has the standard format headers in addition to the operator set information.
     * </pre>
     *
     * Protobuf type {@code onnx.OperatorSetProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:onnx.OperatorSetProto)
        onnx.OnnxOperatorsProto3.OperatorSetProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return onnx.OnnxOperatorsProto3.internal_static_onnx_OperatorSetProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return onnx.OnnxOperatorsProto3.internal_static_onnx_OperatorSetProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                onnx.OnnxOperatorsProto3.OperatorSetProto.class, onnx.OnnxOperatorsProto3.OperatorSetProto.Builder.class);
      }

      // Construct using onnx.OnnxOperatorsProto3.OperatorSetProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getOperatorFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        magic_ = "";

        irVersion_ = 0;

        irVersionPrerelease_ = "";

        irBuildMetadata_ = "";

        domain_ = "";

        opsetVersion_ = 0L;

        docString_ = "";

        if (operatorBuilder_ == null) {
          operator_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          operatorBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return onnx.OnnxOperatorsProto3.internal_static_onnx_OperatorSetProto_descriptor;
      }

      public onnx.OnnxOperatorsProto3.OperatorSetProto getDefaultInstanceForType() {
        return onnx.OnnxOperatorsProto3.OperatorSetProto.getDefaultInstance();
      }

      public onnx.OnnxOperatorsProto3.OperatorSetProto build() {
        onnx.OnnxOperatorsProto3.OperatorSetProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public onnx.OnnxOperatorsProto3.OperatorSetProto buildPartial() {
        onnx.OnnxOperatorsProto3.OperatorSetProto result = new onnx.OnnxOperatorsProto3.OperatorSetProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.magic_ = magic_;
        result.irVersion_ = irVersion_;
        result.irVersionPrerelease_ = irVersionPrerelease_;
        result.irBuildMetadata_ = irBuildMetadata_;
        result.domain_ = domain_;
        result.opsetVersion_ = opsetVersion_;
        result.docString_ = docString_;
        if (operatorBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            operator_ = java.util.Collections.unmodifiableList(operator_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.operator_ = operator_;
        } else {
          result.operator_ = operatorBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof onnx.OnnxOperatorsProto3.OperatorSetProto) {
          return mergeFrom((onnx.OnnxOperatorsProto3.OperatorSetProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(onnx.OnnxOperatorsProto3.OperatorSetProto other) {
        if (other == onnx.OnnxOperatorsProto3.OperatorSetProto.getDefaultInstance()) return this;
        if (!other.getMagic().isEmpty()) {
          magic_ = other.magic_;
          onChanged();
        }
        if (other.getIrVersion() != 0) {
          setIrVersion(other.getIrVersion());
        }
        if (!other.getIrVersionPrerelease().isEmpty()) {
          irVersionPrerelease_ = other.irVersionPrerelease_;
          onChanged();
        }
        if (!other.getIrBuildMetadata().isEmpty()) {
          irBuildMetadata_ = other.irBuildMetadata_;
          onChanged();
        }
        if (!other.getDomain().isEmpty()) {
          domain_ = other.domain_;
          onChanged();
        }
        if (other.getOpsetVersion() != 0L) {
          setOpsetVersion(other.getOpsetVersion());
        }
        if (!other.getDocString().isEmpty()) {
          docString_ = other.docString_;
          onChanged();
        }
        if (operatorBuilder_ == null) {
          if (!other.operator_.isEmpty()) {
            if (operator_.isEmpty()) {
              operator_ = other.operator_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureOperatorIsMutable();
              operator_.addAll(other.operator_);
            }
            onChanged();
          }
        } else {
          if (!other.operator_.isEmpty()) {
            if (operatorBuilder_.isEmpty()) {
              operatorBuilder_.dispose();
              operatorBuilder_ = null;
              operator_ = other.operator_;
              bitField0_ = (bitField0_ & ~0x00000080);
              operatorBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getOperatorFieldBuilder() : null;
            } else {
              operatorBuilder_.addAllMessages(other.operator_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        onnx.OnnxOperatorsProto3.OperatorSetProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (onnx.OnnxOperatorsProto3.OperatorSetProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object magic_ = "";
      /**
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>string magic = 1;</code>
       */
      public java.lang.String getMagic() {
        java.lang.Object ref = magic_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          magic_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>string magic = 1;</code>
       */
      public com.google.protobuf.ByteString
          getMagicBytes() {
        java.lang.Object ref = magic_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          magic_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>string magic = 1;</code>
       */
      public Builder setMagic(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        magic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>string magic = 1;</code>
       */
      public Builder clearMagic() {
        
        magic_ = getDefaultInstance().getMagic();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>string magic = 1;</code>
       */
      public Builder setMagicBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        magic_ = value;
        onChanged();
        return this;
      }

      private int irVersion_ ;
      /**
       * <pre>
       * All OperatorSetProtos indicate the version of the IR syntax and semantics
       * they adhere to. It is always IR_VERSION.
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>int32 ir_version = 2;</code>
       */
      public int getIrVersion() {
        return irVersion_;
      }
      /**
       * <pre>
       * All OperatorSetProtos indicate the version of the IR syntax and semantics
       * they adhere to. It is always IR_VERSION.
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>int32 ir_version = 2;</code>
       */
      public Builder setIrVersion(int value) {
        
        irVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All OperatorSetProtos indicate the version of the IR syntax and semantics
       * they adhere to. It is always IR_VERSION.
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>int32 ir_version = 2;</code>
       */
      public Builder clearIrVersion() {
        
        irVersion_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object irVersionPrerelease_ = "";
      /**
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_version_prerelease = 3;</code>
       */
      public java.lang.String getIrVersionPrerelease() {
        java.lang.Object ref = irVersionPrerelease_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          irVersionPrerelease_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_version_prerelease = 3;</code>
       */
      public com.google.protobuf.ByteString
          getIrVersionPrereleaseBytes() {
        java.lang.Object ref = irVersionPrerelease_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          irVersionPrerelease_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_version_prerelease = 3;</code>
       */
      public Builder setIrVersionPrerelease(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        irVersionPrerelease_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_version_prerelease = 3;</code>
       */
      public Builder clearIrVersionPrerelease() {
        
        irVersionPrerelease_ = getDefaultInstance().getIrVersionPrerelease();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_version_prerelease = 3;</code>
       */
      public Builder setIrVersionPrereleaseBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        irVersionPrerelease_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object irBuildMetadata_ = "";
      /**
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_build_metadata = 7;</code>
       */
      public java.lang.String getIrBuildMetadata() {
        java.lang.Object ref = irBuildMetadata_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          irBuildMetadata_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_build_metadata = 7;</code>
       */
      public com.google.protobuf.ByteString
          getIrBuildMetadataBytes() {
        java.lang.Object ref = irBuildMetadata_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          irBuildMetadata_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_build_metadata = 7;</code>
       */
      public Builder setIrBuildMetadata(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        irBuildMetadata_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_build_metadata = 7;</code>
       */
      public Builder clearIrBuildMetadata() {
        
        irBuildMetadata_ = getDefaultInstance().getIrBuildMetadata();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_build_metadata = 7;</code>
       */
      public Builder setIrBuildMetadataBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        irBuildMetadata_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object domain_ = "";
      /**
       * <pre>
       * Domain opName of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       *
       * <code>string domain = 4;</code>
       */
      public java.lang.String getDomain() {
        java.lang.Object ref = domain_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          domain_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Domain opName of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       *
       * <code>string domain = 4;</code>
       */
      public com.google.protobuf.ByteString
          getDomainBytes() {
        java.lang.Object ref = domain_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          domain_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Domain opName of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       *
       * <code>string domain = 4;</code>
       */
      public Builder setDomain(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        domain_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Domain opName of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       *
       * <code>string domain = 4;</code>
       */
      public Builder clearDomain() {
        
        domain_ = getDefaultInstance().getDomain();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Domain opName of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       *
       * <code>string domain = 4;</code>
       */
      public Builder setDomainBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        domain_ = value;
        onChanged();
        return this;
      }

      private long opsetVersion_ ;
      /**
       * <pre>
       * The version of the set of operators. This is a simple int value
       * that is monotonically increasing as new versions of operator set
       * are published. All operators in this set MUST have version
       * numbers no greater than opset_version.
       * </pre>
       *
       * <code>int64 opset_version = 5;</code>
       */
      public long getOpsetVersion() {
        return opsetVersion_;
      }
      /**
       * <pre>
       * The version of the set of operators. This is a simple int value
       * that is monotonically increasing as new versions of operator set
       * are published. All operators in this set MUST have version
       * numbers no greater than opset_version.
       * </pre>
       *
       * <code>int64 opset_version = 5;</code>
       */
      public Builder setOpsetVersion(long value) {
        
        opsetVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The version of the set of operators. This is a simple int value
       * that is monotonically increasing as new versions of operator set
       * are published. All operators in this set MUST have version
       * numbers no greater than opset_version.
       * </pre>
       *
       * <code>int64 opset_version = 5;</code>
       */
      public Builder clearOpsetVersion() {
        
        opsetVersion_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object docString_ = "";
      /**
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 6;</code>
       */
      public java.lang.String getDocString() {
        java.lang.Object ref = docString_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          docString_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 6;</code>
       */
      public com.google.protobuf.ByteString
          getDocStringBytes() {
        java.lang.Object ref = docString_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          docString_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 6;</code>
       */
      public Builder setDocString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        docString_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 6;</code>
       */
      public Builder clearDocString() {
        
        docString_ = getDefaultInstance().getDocString();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 6;</code>
       */
      public Builder setDocStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        docString_ = value;
        onChanged();
        return this;
      }

      private java.util.List<onnx.OnnxOperatorsProto3.OperatorProto> operator_ =
        java.util.Collections.emptyList();
      private void ensureOperatorIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          operator_ = new java.util.ArrayList<onnx.OnnxOperatorsProto3.OperatorProto>(operator_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          onnx.OnnxOperatorsProto3.OperatorProto, onnx.OnnxOperatorsProto3.OperatorProto.Builder, onnx.OnnxOperatorsProto3.OperatorProtoOrBuilder> operatorBuilder_;

      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public java.util.List<onnx.OnnxOperatorsProto3.OperatorProto> getOperatorList() {
        if (operatorBuilder_ == null) {
          return java.util.Collections.unmodifiableList(operator_);
        } else {
          return operatorBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public int getOperatorCount() {
        if (operatorBuilder_ == null) {
          return operator_.size();
        } else {
          return operatorBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public onnx.OnnxOperatorsProto3.OperatorProto getOperator(int index) {
        if (operatorBuilder_ == null) {
          return operator_.get(index);
        } else {
          return operatorBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder setOperator(
          int index, onnx.OnnxOperatorsProto3.OperatorProto value) {
        if (operatorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOperatorIsMutable();
          operator_.set(index, value);
          onChanged();
        } else {
          operatorBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder setOperator(
          int index, onnx.OnnxOperatorsProto3.OperatorProto.Builder builderForValue) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          operator_.set(index, builderForValue.build());
          onChanged();
        } else {
          operatorBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder addOperator(onnx.OnnxOperatorsProto3.OperatorProto value) {
        if (operatorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOperatorIsMutable();
          operator_.add(value);
          onChanged();
        } else {
          operatorBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder addOperator(
          int index, onnx.OnnxOperatorsProto3.OperatorProto value) {
        if (operatorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOperatorIsMutable();
          operator_.add(index, value);
          onChanged();
        } else {
          operatorBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder addOperator(
          onnx.OnnxOperatorsProto3.OperatorProto.Builder builderForValue) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          operator_.add(builderForValue.build());
          onChanged();
        } else {
          operatorBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder addOperator(
          int index, onnx.OnnxOperatorsProto3.OperatorProto.Builder builderForValue) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          operator_.add(index, builderForValue.build());
          onChanged();
        } else {
          operatorBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder addAllOperator(
          java.lang.Iterable<? extends onnx.OnnxOperatorsProto3.OperatorProto> values) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, operator_);
          onChanged();
        } else {
          operatorBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder clearOperator() {
        if (operatorBuilder_ == null) {
          operator_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          operatorBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder removeOperator(int index) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          operator_.remove(index);
          onChanged();
        } else {
          operatorBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public onnx.OnnxOperatorsProto3.OperatorProto.Builder getOperatorBuilder(
          int index) {
        return getOperatorFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public onnx.OnnxOperatorsProto3.OperatorProtoOrBuilder getOperatorOrBuilder(
          int index) {
        if (operatorBuilder_ == null) {
          return operator_.get(index);  } else {
          return operatorBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public java.util.List<? extends onnx.OnnxOperatorsProto3.OperatorProtoOrBuilder> 
           getOperatorOrBuilderList() {
        if (operatorBuilder_ != null) {
          return operatorBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(operator_);
        }
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public onnx.OnnxOperatorsProto3.OperatorProto.Builder addOperatorBuilder() {
        return getOperatorFieldBuilder().addBuilder(
            onnx.OnnxOperatorsProto3.OperatorProto.getDefaultInstance());
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public onnx.OnnxOperatorsProto3.OperatorProto.Builder addOperatorBuilder(
          int index) {
        return getOperatorFieldBuilder().addBuilder(
            index, onnx.OnnxOperatorsProto3.OperatorProto.getDefaultInstance());
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (opName, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public java.util.List<onnx.OnnxOperatorsProto3.OperatorProto.Builder> 
           getOperatorBuilderList() {
        return getOperatorFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          onnx.OnnxOperatorsProto3.OperatorProto, onnx.OnnxOperatorsProto3.OperatorProto.Builder, onnx.OnnxOperatorsProto3.OperatorProtoOrBuilder> 
          getOperatorFieldBuilder() {
        if (operatorBuilder_ == null) {
          operatorBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              onnx.OnnxOperatorsProto3.OperatorProto, onnx.OnnxOperatorsProto3.OperatorProto.Builder, onnx.OnnxOperatorsProto3.OperatorProtoOrBuilder>(
                  operator_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          operator_ = null;
        }
        return operatorBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:onnx.OperatorSetProto)
    }

    // @@protoc_insertion_point(class_scope:onnx.OperatorSetProto)
    private static final onnx.OnnxOperatorsProto3.OperatorSetProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new onnx.OnnxOperatorsProto3.OperatorSetProto();
    }

    public static onnx.OnnxOperatorsProto3.OperatorSetProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OperatorSetProto>
        PARSER = new com.google.protobuf.AbstractParser<OperatorSetProto>() {
      public OperatorSetProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new OperatorSetProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<OperatorSetProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OperatorSetProto> getParserForType() {
      return PARSER;
    }

    public onnx.OnnxOperatorsProto3.OperatorSetProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_onnx_OperatorProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_onnx_OperatorProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_onnx_OperatorSetProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_onnx_OperatorSetProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025onnx-operators.proto3\022\004onnx\032\013onnx.prot" +
      "o3\"\257\001\n\rOperatorProto\022\017\n\007op_type\030\001 \001(\t\022\025\n" +
      "\rsince_version\030\002 \001(\003\0222\n\006status\030\003 \001(\0162\".o" +
      "nnx.OperatorProto.OperatorStatus\022\022\n\ndoc_" +
      "string\030\n \001(\t\".\n\016OperatorStatus\022\020\n\014EXPERI" +
      "MENTAL\020\000\022\n\n\006STABLE\020\001\"\321\001\n\020OperatorSetProt" +
      "o\022\r\n\005magic\030\001 \001(\t\022\022\n\nir_version\030\002 \001(\005\022\035\n\025" +
      "ir_version_prerelease\030\003 \001(\t\022\031\n\021ir_build_" +
      "metadata\030\007 \001(\t\022\016\n\006domain\030\004 \001(\t\022\025\n\ropset_" +
      "version\030\005 \001(\003\022\022\n\ndoc_string\030\006 \001(\t\022%\n\010ope",
      "rator\030\010 \003(\0132\023.onnx.OperatorProtob\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          onnx.OnnxProto3.getDescriptor(),
        }, assigner);
    internal_static_onnx_OperatorProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_onnx_OperatorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_onnx_OperatorProto_descriptor,
        new java.lang.String[] { "OpType", "SinceVersion", "Status", "DocString", });
    internal_static_onnx_OperatorSetProto_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_onnx_OperatorSetProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_onnx_OperatorSetProto_descriptor,
        new java.lang.String[] { "Magic", "IrVersion", "IrVersionPrerelease", "IrBuildMetadata", "Domain", "OpsetVersion", "DocString", "Operator", });
    onnx.OnnxProto3.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
